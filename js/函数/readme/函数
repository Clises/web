
1.1 什么是数据
通俗的讲，数据就是存储在内存中特定的信息，其本质上就是形如0101的数字编码。内存对数据进行赋值、逻辑、函数相关运算，对所有数据进行操作。
1.2 什么是内存
一块内存可分为栈空间和堆空间，栈用来存储全局变量和局部变量，堆来存储对象，完整的代码执行过程就是代码加到内存运行，然后进行编译，最后进行解析执行。
1.3 什么是变量
变量就是可变化的量，由变量名和变量值组成，每个变量都对应一块内存，变量名就是为了查找对应的内存。
1.4 内存、数据、变量三者之间的关系 
内存是用来存储数据的空间（临时的）；而变量是内存的标识，也就是利用变量在内存中内存中寻找数据的位置。


  
2.数据类型
在 js中数据可分为两种类型：基本值类型、对象类型（引用类型）
2.1 基本值类型 
基本值类型也就是保存在栈内存中的简单数据段，就是我们为后续程序操作做的必要准备。
2.1.1 基本值类型包括 string:任意字符串  
      Number：任意数字 
      boolean：true/flase  
      undefined:undefined 
      null:null 
2.1.2 那么如何对基本值类型进行判断呢？
  使用 typeof（）
  代码示例：
  ```javascript
    var a;
    console.log(  a,typeof a,typeof a==='undefined',a===undefined)   //undefined "undefined"  true true
    console.log(undefined==="undefined") 
    //数值
    a=3;
    // a=== 不能来判断数值类型，因为变量值会不断去更改
    //     如果a===4会返回flase
    console.log(typeof a==='number')
    //字符串
    a='kkkk'
    console.log(typeof a==='string')
    //boolean
    a=true
    console.log(typeof a==='boolean')
    //null
    a=null;
    console.log(typeof a)  //object
```

2.2 对象类型（引用类型）
万物皆对象，在 js 中对象类型可分为以下几类
Object：任何对象都是 object 类型
Function:一种特别的对象（可以去执行）
Array:一种特别的对象（数值下标）通过下标来操作，内部数据是有序的。

2.2.1 如何对对象类型进行判断






## js中的函数
  ### 立即执行函数

```js

/*函数声明*/
function name() {
    
}
    /*函数表达式*/
    var name=function () {
        
    }
    /*匿名函数*/
    function() {
        
    }
/*函数声明和函数表达式的区别*/
    /*
    * 函数声明需要js代码解析到当前这行才可以调用
    * 函数表达式后加()可以立即执行调用，函数声明不可以，只能以name()调用
    * */
    /********举例子*******/
    fName();
    function fName(){...}//正确，函数声明提升，所以 fName()可以写在函数声明之前。

    fName();
    var fName=function(){...}//错误，函数表达式不具备函数声明提升。

    var fName=function(){...}();//正确，函数表达式后边加()立即调用函数。

    function fName(){...}();//错误，函数声明必须用fName()调用。
    //这行代码被解析为两部分： 1函数声明 function fName(){...}, 2分组表达式(),这表达式有误，因为括号内没有表达式，

    function (){...}();//匿名函数不可以这么调用，因为function(){...}被当做了声明，声明不可以直接()调用。
    //立即执行函数

    /*
    *常见写法:
    * (function(){...})()
      (function(){...}())
    *
    * */
 var aa=function() {
            var a='';
            for (var b=0;b<10;b++){
                a+=b;
            }
            return a;
        }()
    console.log(aa)

```






