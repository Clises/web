<?php
/**
 * Created by PhpStorm.
 * User: 15318
 * Date: 2017/10/9
 * Time: 10:12
 */
/*
 * 接口：具有相同属性和行为的抽象类的抽象，
 *  1、父类具有相同属性和行为的时候，可以抽成抽象类，。
 * 当多个抽象类具有相同属性和行为的时候，可以再抽成一个类，称之为接口，
 * 2、接口的修饰关键字：interface，用它修饰的类都叫接口。
 * 3、接口目的：进一步简化代码，
 * 4、接口里的抽象方法同意默认没有方法体，而且不能写普通方法。
 * 5、关键字 abstract 默认也是不写的，同时修饰符权限，要用public
 *
 *
 * 子类实现接口用的关键字implements来实现一个接口。
 *
 */
abstract class Animal1{
    public $name="Errol";
    public  $age=100;
    public  $sex="男";

    function hhao(){
        echo $this->name;
        echo $this->age;
        echo $this->sex;
    }
    function eat(){
                //行为当中的一种
    }
//    abstract public  function haha($name="",$age=90);  //抽象方法没有方法体。
}




//子类继承抽象类的一种写法
//子类在实现使用的关键字 implements来实现。
//必须实现接口中的抽象方法，不能写普通方法。
    class Doctor extends Animal1 implements Jiekouanimal{
    //这个方法不再是抽象类中的抽象方法，而是接口当中的抽象方法。
        /**
         * Doctor constructor.
         */

        //实现animal父类的方法，
        public function haha($name = "", $age = 90)
        {
            // TODO: Implement haha() method.
        }
        //子类的构造方法，指向的是父类中属性。
        public function __construct($name="",$age=0,$sex="")
        {
            $this->name=$name;
            $this->age= $age;
            $this->sex=$sex;

        }
        function hhao()
        {
         parent::hhao();   //调用父类方法。
    /*    echo $this->name;
            echo $this->age;
            echo $this->sex;*/
        }

        function eat()
        {
            parent::eat(); // TODO: Change the autogenerated stub
        }


    }
    interface Jiekouanimal{
    public  function haha($name="",$age=90);

}
    //实例化子类的实例
//   $myDoctor=new Doctor("clise",20,"男");
//当前的子类对象可以操作父类属性，
//    $myDoctor->name="errol";
  /*  $myDoctor->age=20;
    $myDoctor->sex="男";*/
$myDoctor=new Doctor("clise",30,"nv");
$myDoctor->hhao();



